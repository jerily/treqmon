# Copyright Jerily LTD. All Rights Reserved.
# SPDX-FileCopyrightText: 2024 Neofytos Dimitriou (neo@jerily.cy)
# SPDX-License-Identifier: MIT.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

package require treqmon

proc history_generator { base data } {
    set output [list]
    set timestamp $base
    foreach { offset duration } $data {
        # offset as "-" is a comment
        if { $offset eq "-" } continue
        incr timestamp -$offset
        lappend output [list $timestamp $duration]
    }
    return [lreverse $output]
}


test treqmonStatistics-1.1 {Test statistics call when there is no statistics, without arguments} -body {
    ::treqmon::statistics
} -result {}

test treqmonStatistics-1.2 {Test statistics call when there is no statistics, with 1 argument} -body {
    ::treqmon::statistics -count_minute
} -result {count_minute 0}

test treqmonStatistics-1.3 {Test statistics call when there is no statistics, with 3 arguments} -body {
    ::treqmon::statistics -count_minute -average_second -count_day
} -result {count_minute 0 average_second 0 count_day 0}

test treqmonStatistics-1.4 {Test statistics call when there is no statistics, with all known arguments} -body {
    ::treqmon::statistics \
        -count_second \
        -count_minute \
        -count_hour \
        -count_day \
        -average_second \
        -average_minute \
        -average_hour \
        -average_day
} -result {count_second 0 count_minute 0 count_hour 0 count_day 0 average_second 0 average_minute 0 average_hour 0 average_day 0}

test treqmonStatistics-1.5 {Test statistics call when there is no statistics, with relative time - now} -body {
    ::treqmon::statistics now
} -result {}

test treqmonStatistics-1.6 {Test statistics call when there is no statistics, with relative time - timestamp} -body {
    ::treqmon::statistics 123
} -result {}

test treqmonStatistics-1.7 {Test statistics call when there is no statistics, with all known arguments + relative time} -body {
    ::treqmon::statistics \
        -count_second \
        -count_minute \
        -count_hour \
        -count_day \
        -average_second \
        -average_minute \
        -average_hour \
        -average_day \
        123
} -result {count_second 0 count_minute 0 count_hour 0 count_day 0 average_second 0 average_minute 0 average_hour 0 average_day 0}

test treqmonStatistics-1.8 {Test statistics call when there is no statistics, with unknown argument} -body {
    ::treqmon::statistics a
} -returnCodes error -result {unknown metric type "a"}

test treqmonStatistics-1.9 {Test statistics call when there is no statistics, with known + unknown argument} -body {
    ::treqmon::statistics -count_second b
} -returnCodes error -result {unknown metric type "b"}

test treqmonStatistics-1.10 {Test statistics call when there is no statistics, with known + unknown argument + relative time} -body {
    ::treqmon::statistics -count_second -foo now
} -returnCodes error -result {unknown metric type "-foo"}

# The base timestamp for all events
set base 1720584267

# This is where we define the history of events. The first number is
# the number of seconds into the past relative to the previous event.
# The second number is the duration of the event in milliseconds.
set history [history_generator $base {
    - { 1st second, 5 events, average duration: 76.2 }
    0  10
    0  20
    0  50
    0  300
    0  1
    -  { 2nd second, 3 events, average duration: 633.6666 }
    1  401
    0  500
    0  1000
    -  { add more events to fill the first minute }
    9  10
    10 40
    39 5
    -  { all of the above events occur within one minute, total events: 11, average duration: 211.54545 }
    -  { the above minute was without events }
    61 10
    -  { the above minute was with only one event, average duration: 10 }
    -  { add more events to fill the first hour }
    1020 1000
    1200 4
    1200 5
    -  { all of the above events occur within one hour, total events: 15, average duration: 223.7333 }
    3600 7
    3600 1
    3600 50
    3600 0
    68459 1
    -  { all of the above events occur within one day, total events: 20, average duration: 170.75 }
    1 40
    -  { the above event relates to the previous day and should be counted on the current day }
}]

test treqmonStatistics-2.1 {Test statistics counters} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -count_second -count_minute -count_hour -count_day $base
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {count_second 5 count_minute 11 count_hour 15 count_day 20}

test treqmonStatistics-2.2 {Test statistics counter for the previous second} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -count_second [expr { $base - 1 }]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {count_second 3}

test treqmonStatistics-2.3 {Test statistics counter for a period without events} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -count_second -count_minute [expr { $base - 60 }]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {count_second 0 count_minute 0}

test treqmonStatistics-2.4 {Test statistics counter for a period with one event} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -count_second -count_minute [expr { $base - 120 }]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {count_second 1 count_minute 1}

test treqmonStatistics-3.1 {Test statistics average} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -average_second -average_minute -average_hour -average_day $base
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {average_second 76 average_minute 212 average_hour 224 average_day 171}

test treqmonStatistics-3.2 {Test statistics average for the previous seconds} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -average_second [expr { $base - 1 }]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {average_second 634}

test treqmonStatistics-3.3 {Test statistics average for a period without events} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -average_second -average_minute [expr { $base - 60 }]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {average_second 0 average_minute 0}

test treqmonStatistics-3.4 {Test statistics average for a period with one event} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics -average_second -average_minute [expr { $base - 120 }]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {average_second 10 average_minute 10}

test treqmonStatistics-4.1 {Test statistics, all metrics} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics \
        -count_second \
        -average_second \
        -count_minute \
        -average_minute \
        -count_hour \
        -average_hour \
        -count_day \
        -average_day \
        $base
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result {count_second 5 average_second 76 count_minute 11 average_minute 212 count_hour 15 average_hour 224 count_day 20 average_day 171}

proc series2result { series } {
    # remove empty elements from series to make checking easier
    dict for { k v } $series {
        if { ![dict get $v count] } {
            dict unset series $k
        }
    }
    # sort series
    set series [lsort -integer -stride 2 -index 0 -decreasing $series]
    # convert a series into a list, where each item is a separate list element
    return [lmap { a b } $series { list $a $b }]
}

test treqmonStatistics-5.1.1 {Test event series, -interval minute} -body {
    set stats [::treqmon::statistics_series -interval minute $base]
    set series [dict keys [dict get $stats series]]
    set series [lsort -integer -decreasing $series]
    # The first value should be the base
    if { [lindex $series 0] != $base } {
        return -code error "The first value is not the base: [lindex $series 0] != $base"
    }
    # difference between values should be exactly 1 second
    unset -nocomplain prev
    foreach timestamp $series {
        if { [info exists prev] && ($prev - $timestamp) != 1 } {
            return -code error "($prev - $timestamp) != 1"
        }
        set prev $timestamp
    }
    # returns the number of values, for a minute interval it should be equal to 60
    llength $series
} -cleanup {
    unset -nocomplain stats series prev timestamp
} -result 60

test treqmonStatistics-5.1.2 {Test event series, -interval hour} -body {
    set stats [::treqmon::statistics_series -interval hour $base]
    set series [dict keys [dict get $stats series]]
    set series [lsort -integer -decreasing $series]
    # The first value should be the base
    if { [lindex $series 0] != $base } {
        return -code error "The first value is not the base: [lindex $series 0] != $base"
    }
    # difference between values should be exactly 60 second
    unset -nocomplain prev
    foreach timestamp $series {
        if { [info exists prev] && ($prev - $timestamp) != 60 } {
            return -code error "($prev - $timestamp) != 60"
        }
        set prev $timestamp
    }
    # returns the number of values, for an hour interval it should be equal to 60
    llength $series
} -cleanup {
    unset -nocomplain stats series prev timestamp
} -result 60

test treqmonStatistics-5.1.3 {Test event series, -interval day} -body {
    set stats [::treqmon::statistics_series -interval day $base]
    set series [dict keys [dict get $stats series]]
    set series [lsort -integer -decreasing $series]
    # The first value should be the base
    if { [lindex $series 0] != $base } {
        return -code error "The first value is not the base: [lindex $series 0] != $base"
    }
    # difference between values should be exactly 60*60 second
    unset -nocomplain prev
    foreach timestamp $series {
        if { [info exists prev] && ($prev - $timestamp) != (60*60) } {
            return -code error "($prev - $timestamp) != (60*60)"
        }
        set prev $timestamp
    }
    # returns the number of values, for a day interval it should be equal to 24
    llength $series
} -cleanup {
    unset -nocomplain stats series prev timestamp
} -result 24

test treqmonStatistics-5.1.4.1 {Test event series, wrong value for -interval} -body {
    set stats [::treqmon::statistics_series -interval foo $base]
} -cleanup {
    unset -nocomplain stats
} -returnCodes error -result {unknown interval "foo", should be minute, hour or day}

test treqmonStatistics-5.1.4.2 {Test event series, no value for -interval} -body {
    set stats [::treqmon::statistics_series -interval $base]
} -cleanup {
    unset -nocomplain stats
} -returnCodes error -result {missing value for option "-interval"}

test treqmonStatistics-5.2.1 {Test event series, -heavy_requests 1} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    llength [dict get [::treqmon::statistics_series -heavy_requests 1 $base] heavy_requests]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result 1

test treqmonStatistics-5.2.2 {Test event series, -heavy_requests 3} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    llength [dict get [::treqmon::statistics_series -heavy_requests 3 $base] heavy_requests]
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -result 3

test treqmonStatistics-5.2.3.1 {Test event series, wrong value for -heavy_requests} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics_series -heavy_requests a $base
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -returnCodes error -result {option -heavy_requests requires an integer value, but got "a"}

test treqmonStatistics-5.2.3.2 {Test event series, no value for -heavy_requests} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    ::treqmon::statistics_series -heavy_requests $base
} -cleanup {
    tsv::unset ::treqmon::worker::history events
} -returnCodes error -result {missing value for option "-heavy_requests"}

test treqmonStatistics-5.3.1 {Test event series, -interval minute, case #1} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    set stat [::treqmon::statistics_series -interval minute $base]

    # prepare the test result
    set result [list]
    # add total number of elements in series
    lappend result [dict size [dict get $stat series]]
    lappend result [dict get $stat heavy_requests]
    lappend result [dict get $stat summary]
    lappend result {*}[series2result [dict get $stat series]]

    join $result \n

} -cleanup {
    tsv::unset ::treqmon::worker::history events
    unset -nocomplain stats result heavy_req series k v a b
} -result {60
{1720584266 1000} {1720584266 500} {1720584266 401} {1720584267 300} {1720584267 50}
count 11 count_min 1 count_max 5 average_max 634 average_min 5 duration_max 1000 duration_min 1
1720584267 {count 5 average 76 duration_max 300 duration_min 1}
1720584266 {count 3 average 634 duration_max 1000 duration_min 401}
1720584257 {count 1 average 10 duration_max 10 duration_min 10}
1720584247 {count 1 average 40 duration_max 40 duration_min 40}
1720584208 {count 1 average 5 duration_max 5 duration_min 5}}

test treqmonStatistics-5.3.2 {Test event series, -interval minute, case #2} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    set stat [::treqmon::statistics_series -interval minute [expr { $base - 1 }]]

    # prepare the test result
    set result [list]
    # add total number of elements in series
    lappend result [dict size [dict get $stat series]]
    lappend result [dict get $stat heavy_requests]
    lappend result [dict get $stat summary]
    lappend result {*}[series2result [dict get $stat series]]

    join $result \n

} -cleanup {
    tsv::unset ::treqmon::worker::history events
    unset -nocomplain stats result heavy_req series k v a b
} -result {60
{1720584266 1000} {1720584266 500} {1720584266 401} {1720584247 40} {1720584257 10}
count 6 count_min 1 count_max 3 average_max 634 average_min 5 duration_max 1000 duration_min 5
1720584266 {count 3 average 634 duration_max 1000 duration_min 401}
1720584257 {count 1 average 10 duration_max 10 duration_min 10}
1720584247 {count 1 average 40 duration_max 40 duration_min 40}
1720584208 {count 1 average 5 duration_max 5 duration_min 5}}

test treqmonStatistics-5.4.1 {Test event series, -interval hour, case #1} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    set stat [::treqmon::statistics_series -interval hour $base]

    # prepare the test result
    set result [list]
    # add total number of elements in series
    lappend result [dict size [dict get $stat series]]
    lappend result [dict get $stat heavy_requests]
    lappend result [dict get $stat summary]
    lappend result {*}[series2result [dict get $stat series]]

    join $result \n

} -cleanup {
    tsv::unset ::treqmon::worker::history events
    unset -nocomplain stats result heavy_req series k v a b
} -result {60
{1720584266 1000} {1720583127 1000} {1720584266 500} {1720584266 401} {1720584267 300}
count 15 count_min 1 count_max 11 average_max 1000 average_min 4 duration_max 1000 duration_min 1
1720584267 {count 11 average 212 duration_max 1000 duration_min 1}
1720584147 {count 1 average 10 duration_max 10 duration_min 10}
1720583127 {count 1 average 1000 duration_max 1000 duration_min 1000}
1720581927 {count 1 average 4 duration_max 4 duration_min 4}
1720580727 {count 1 average 5 duration_max 5 duration_min 5}}

test treqmonStatistics-5.4.2 {Test event series, -interval hour, case #2} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    set stat [::treqmon::statistics_series -interval hour [expr { $base - 1 }]]

    # prepare the test result
    set result [list]
    # add total number of elements in series
    lappend result [dict size [dict get $stat series]]
    lappend result [dict get $stat heavy_requests]
    lappend result [dict get $stat summary]
    lappend result {*}[series2result [dict get $stat series]]

    join $result \n

} -cleanup {
    tsv::unset ::treqmon::worker::history events
    unset -nocomplain stats result heavy_req series k v a b
} -result {60
{1720584266 1000} {1720583127 1000} {1720584266 500} {1720584266 401} {1720584247 40}
count 10 count_min 1 count_max 6 average_max 1000 average_min 4 duration_max 1000 duration_min 4
1720584266 {count 6 average 326 duration_max 1000 duration_min 5}
1720584206 {count 1 average 10 duration_max 10 duration_min 10}
1720583186 {count 1 average 1000 duration_max 1000 duration_min 1000}
1720581986 {count 1 average 4 duration_max 4 duration_min 4}
1720580786 {count 1 average 5 duration_max 5 duration_min 5}}

test treqmonStatistics-5.5.1 {Test event series, -interval day, case #1} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    set stat [::treqmon::statistics_series -interval day $base]

    # prepare the test result
    set result [list]
    # add total number of elements in series
    lappend result [dict size [dict get $stat series]]
    lappend result [dict get $stat heavy_requests]
    lappend result [dict get $stat summary]
    lappend result {*}[series2result [dict get $stat series]]

    join $result \n

} -cleanup {
    tsv::unset ::treqmon::worker::history events
    unset -nocomplain stats result heavy_req series k v a b
} -result {24
{1720584266 1000} {1720583127 1000} {1720584266 500} {1720584266 401} {1720584267 300}
count 20 count_min 1 count_max 15 average_max 224 average_min 0 duration_max 1000 duration_min 0
1720584267 {count 15 average 224 duration_max 1000 duration_min 1}
1720580667 {count 1 average 7 duration_max 7 duration_min 7}
1720577067 {count 1 average 1 duration_max 1 duration_min 1}
1720573467 {count 1 average 50 duration_max 50 duration_min 50}
1720569867 {count 1 average 0 duration_max 0 duration_min 0}
1720501467 {count 1 average 1 duration_max 1 duration_min 1}}

test treqmonStatistics-5.5.2 {Test event series, -interval day, case #2} -setup {
    tsv::set ::treqmon::worker::history events $history
} -body {
    set stat [::treqmon::statistics_series -interval day [expr { $base - 1 }]]

    # prepare the test result
    set result [list]
    # add total number of elements in series
    lappend result [dict size [dict get $stat series]]
    lappend result [dict get $stat heavy_requests]
    lappend result [dict get $stat summary]
    lappend result {*}[series2result [dict get $stat series]]

    join $result \n

} -cleanup {
    tsv::unset ::treqmon::worker::history events
    unset -nocomplain stats result heavy_req series k v a b
} -result {24
{1720584266 1000} {1720583127 1000} {1720584266 500} {1720584266 401} {1720569927 50}
count 16 count_min 1 count_max 10 average_max 298 average_min 0 duration_max 1000 duration_min 0
1720584266 {count 10 average 298 duration_max 1000 duration_min 4}
1720580666 {count 1 average 7 duration_max 7 duration_min 7}
1720577066 {count 1 average 1 duration_max 1 duration_min 1}
1720573466 {count 1 average 50 duration_max 50 duration_min 50}
1720569866 {count 1 average 0 duration_max 0 duration_min 0}
1720501466 {count 2 average 21 duration_max 40 duration_min 1}}
